{
    "version": "https://jsonfeed.org/version/1",
    "title": "NERV - SN • All posts by \"平面几何\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/18/CF958E1%20Guard%20Duty%20(easy)/",
            "url": "http://example.com/2023/08/18/CF958E1%20Guard%20Duty%20(easy)/",
            "title": "题解 洛谷 CF958E1 Guard Duty (easy)",
            "date_published": "2023-08-18T03:15:00.000Z",
            "content_html": "<h1>题解 CF958E1 Guard Duty (easy)</h1>\n<h2 id=\"这是一道诈骗题\">这是一道诈骗题</h2>\n<h3 id=\"简要题意\">简要题意</h3>\n<p>给你 $n$ 个 $R$ 点和 $m$ 个 $B$ 点，现在给你这些点的坐标，问能否在这两类点间连线来构造出一种情况使得一个线段两边分别是 $R$ 和 $B$。</p>\n<h3 id=\"策略分析\">策略分析</h3>\n<h4 id=\"不合法情况\">不合法情况</h4>\n<p>当 $n\\ne m$ 时，我们顺次连接 $R$ 和 $B$，先不考虑相交不相交，发现连到最后要么 $R$ 和 $R$ 相连，要么 $B$ 和 $B$ 相连，一定不合法。</p>\n<h4 id=\"合法情况\">合法情况</h4>\n<p><strong>当 $n=m$ 时，答案一定合法</strong></p>\n<h5 id=\"正确性证明\">正确性证明</h5>\n<p>我们设有点 $R_1,R_2,B_1,B_2$，那么我们加上边 $(R_1,B_1),(R_2,B_1),(R_1,B_2)$，发现相交了，如下图：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJ85D0.jpg\" alt=\"\"></p>\n<p>但我们发现，当这种相交情况出现时，我们只需要改连边 $(R_1,B_1),(R_2,B_1),(R_2,B_2)$，就一定能变成不相交的情况，如下图：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJ84uq.jpg\" alt=\"\"></p>\n<p>于是我们做完了，下面是AC代码</p>\n<h3 id=\"参考代码\">参考代码</h3>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    int n, m;\n    int work()\n    &#123;   \n        cin &gt;&gt; n &gt;&gt; m;\n        n == m ? cout &lt;&lt; &quot;Yes\\n&quot; : cout &lt;&lt; &quot;No\\n&quot;;\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n",
            "tags": [
                "平面几何"
            ]
        }
    ]
}