<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NERV - SN • Posts by &#34;构造&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-09-26T06:57:00.000Z</updated>
    <category term="OIer 日记" />
    <category term="图论" />
    <category term="构造" />
    <category term="二进制;位运算" />
    <category term="栈" />
    <category term="哈夫曼树;哈夫曼编码" />
    <category term="枚举" />
    <category term="构造;二进制;枚举" />
    <category term="二进制" />
    <category term="二进制;高精度" />
    <category term="平面几何" />
    <category term="分治" />
    <category term="对顶堆;数据结构" />
    <category term="平衡树;数据结构" />
    <category term="线段树;数据结构" />
    <category term="贪心" />
    <category term="矩阵乘法;倍增" />
    <category term="数学" />
    <category term="线性筛" />
    <category term="割边;Tarjan" />
    <category term="割点;Tarjan" />
    <category term="容斥;根号分治" />
    <category term="状态压缩;容斥" />
    <category term="矩阵加速;动态规划" />
    <category term="雷电法王" />
    <entry>
        <id>http://example.com/2023/09/26/AT_arc129_b%20[ARC129B]%20Range%20Point%20Distance/</id>
        <title>题解 AT_arc129_b Range Point Distance</title>
        <link rel="alternate" href="http://example.com/2023/09/26/AT_arc129_b%20[ARC129B]%20Range%20Point%20Distance/"/>
        <content type="html">&lt;h1&gt;AT_arc129_b Range Point Distance&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定 $N$ 对 $L_i, R_i$，然后在每次给出后都要选一个 $x$ 使得 $x$ 到之前给出的所有区间的距离 $dist$ 的最大值最小。一个 $x$ 到区间 $l,r$ 的距离定义为 $dist=\max(0, l - x, x - r)$。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;既然我们每次都要输出答案，那我们不妨从 $dist$ 的定义入手，我们发现在这个定义中，当其结果不为 $0$ 时只有两种情况，要么 $l$ 在 $x$ 右边，要么 $r$ 在 $x$ 左边。那么我们考虑现在有一堆区间，因为我们求的是 $x$ 到所有区间距离的最大值，所以其实我们需要关心的，能够对我们答案造成影响的值就是最靠右的 $L$ 和最靠左的 $R$。得到这个结论后剩下的就比较简单了，我们只需要每次输入一个区间都更新一下这个关键的 $L$ 和 $R$ 即可。&lt;/p&gt;
&lt;p&gt;我们现在知道了能够对我们答案造成影响的两个关键点，那么答案如何求解呢，我们进行分类讨论。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 $L \le R$ 时，意味着之前输入的所有区间都有一个共同的交集 $[L,R]$，这个结论直接从 $L,R$ 的定义得出，那么我们随便在 $L,R$ 里怎么选都是 $0$，所以要找的最小值就是 $0$。&lt;/li&gt;
&lt;li&gt;当 $L &amp;gt;R$ 时，以 $L$ 为左端点的区间和以 $R$ 为右端点的区间一定是之前输入的所有区间里距离最远的一组，只有这一对区间才会产生到 $x$ 的最大值。那么这个最大值最小当且仅当 $x$ 取在 $L,R$ 正中间，又因为要去最大值所以此时 $dist = \left \lceil \frac{L + R}{2}  \right \rceil$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分析出这两条以后直接在线做就好了，时间复杂度是线性的。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#define LL long long
using namespace std;

namespace SHAWN &amp;#123;
    const LL INF = 1e9 + 7;
    LL n, sl = -INF, sr = INF;
    signed work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            LL l, r; cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; r;
            sl = max(sl, l), sr = min(sr, r);
            // 更新两个关键点
            if (sr &amp;gt;= sl) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;0\n&amp;quot;; &amp;#125;
            else cout &amp;lt;&amp;lt; ((sl - sr + 1) &amp;gt;&amp;gt; 1) &amp;lt;&amp;lt; &#39;\n&#39;;
            // 按照刚刚的分类讨论进行输出
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-09-26T06:57:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/20/CF1204D2%20Kirk%20and%20a%20Binary%20String%20(hard%20version)/</id>
        <title>题解 CF1204D2 Kirk and a Binary String (hard version)</title>
        <link rel="alternate" href="http://example.com/2023/09/20/CF1204D2%20Kirk%20and%20a%20Binary%20String%20(hard%20version)/"/>
        <content type="html">&lt;h1&gt;CF1204D2 Kirk and a Binary String (hard version)&lt;/h1&gt;
&lt;h2 id=&#34;形式化题意&#34;&gt;形式化题意&lt;/h2&gt;
&lt;p&gt;给你一个长为 $n$ 的仅包含 $0$ 和 $1$ 的串，要求尽可能多地将里面的 $1$ 改成 $0$ 使得在得到的新串中，对于 $\forall l,r\in [1,n](l \le r)$，两个串的 $[l,r]$ 区间内的最长不降子序列等长。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;题中给的数据范围是 $10^5$，我们很容易去思考一些 $O(n \log n)$ 的做法，从而去找数据结构来维护，但这是 CF 的题，所以我们坚信这一定是一道人类智慧题。所以我们充分发扬人类智慧，$O(n)$ 来构造这个题。&lt;/p&gt;
&lt;p&gt;对于只有 $0,1$ 的串来讲，一个序列想要不降其实只需要满足两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果当前位为 $0$，那么后面无论 $0,1$ 都是不降的；&lt;/li&gt;
&lt;li&gt;如果当前位为 $1$，那么后面为 $1$ 才是不降的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我们是不是很容易发现本题的构造原则：一个 $1$ 能够被替换成 $0$ &lt;strong&gt;当且仅当这个 $1$ 后面的 $1$ 的个数大于等于 $0$ 的个数&lt;/strong&gt;。这个结论说出来很抽象，我们用一个例子来理解。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 1 1 1 1 1 0 0 0
1 2 3 4 5 6 7 8 9 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了方便读者观看，这个串下面的数字是其下标。我们以下标为 $2$ 的这个下标的位置为例，$[2,9]$ 区间内的最长不降子序列是 &lt;code&gt;1 1 1 1 1&lt;/code&gt;，这一位改成 $0$ 后变成 &lt;code&gt;0 1 1 1 1&lt;/code&gt;，不管怎么变长度都不会变，因为其后 $1$ 比 $0$ 多，最长不降子序列一定是连着一坨 $1$。然而对于下标为 $4$ 这个位置的 $1$ 来讲，这一位后面的 $0$ 比 $1$ 多，我们将这一位换成 $0$ 后，$[4,9]$ 区间内的最长不降子序列从 &lt;code&gt;1 1 1&lt;/code&gt; 变成了 &lt;code&gt;0 0 0 0&lt;/code&gt;，不符合我们的构造条件。&lt;/p&gt;
&lt;p&gt;出现这种情况的原因是，对于当前位来讲，它的最长不降子序列只能是一堆 $1$，这是我们刚刚提到过的结论，改成 $0$ 后就有了三种选择，而我们必须让它别无选择，这就要求更改的这一位只能继续选后面连一堆 $1$，那么我们发现这种别无选择的情况就必须让当前位后的 $1$ 的数量比 $0$ 的数量多，这就证明了我们刚刚得出的结论，这道题也就做完了。&lt;/p&gt;
&lt;p&gt;在写代码的时候，我们可以把维护个数改成维护 $0$ 与 $1$ 的个数的差值，这样可以简化代码难度，当 $0$ 的个数减去 $1$ 的个数非正时就把这一位的 $1$ 换掉。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    string s;
    int cnt;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; s;
        for (int i = s.size() - 1; i &amp;gt;= 0; --i) &amp;#123;
            if (s[i] == &#39;0&#39;) &amp;#123; ++cnt; &amp;#125;
            else if (s[i] == &#39;1&#39; &amp;amp;&amp;amp; cnt &amp;lt;= 0) &amp;#123; s[i] = &#39;0&#39;; &amp;#125;
            else &amp;#123; --cnt; &amp;#125;
        &amp;#125;
        cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &#39;\n&#39;;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-09-20T07:41:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/20/CF1204D1%20Kirk%20and%20a%20Binary%20String%20(easy%20version)/</id>
        <title>题解 CF1204D1 Kirk and a Binary String (easy version)</title>
        <link rel="alternate" href="http://example.com/2023/09/20/CF1204D1%20Kirk%20and%20a%20Binary%20String%20(easy%20version)/"/>
        <content type="html">&lt;h1&gt;CF1204D1 Kirk and a Binary String (easy version)&lt;/h1&gt;
&lt;h2 id=&#34;形式化题意&#34;&gt;形式化题意&lt;/h2&gt;
&lt;p&gt;给你一个长为 $n$ 的仅包含 $0$ 和 $1$ 的串，要求尽可能多地将里面的 $1$ 改成 $0$ 使得在得到的新串中，对于 $\forall l,r\in [1,n](l \le r)$，两个串的 $[l,r]$ 区间内的最长不降子序列等长。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;题中给的数据范围完全可以 $O(n^2)$ 搜过，但这是 CF 的题，所以我们坚信这一定是一道人类智慧题。所以我们充分发扬人类智慧，$O(n)$ 来构造这个题。&lt;/p&gt;
&lt;p&gt;对于只有 $0,1$ 的串来讲，一个序列想要不降其实只需要满足两个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果当前位为 $0$，那么后面无论 $0,1$ 都是不降的；&lt;/li&gt;
&lt;li&gt;如果当前位为 $1$，那么后面为 $1$ 才是不降的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我们是不是很容易发现本题的构造原则：一个 $1$ 能够被替换成 $0$ &lt;strong&gt;当且仅当这个 $1$ 后面的 $1$ 的个数大于等于 $0$ 的个数&lt;/strong&gt;。这个结论说出来很抽象，我们用一个例子来理解。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 1 1 1 1 1 0 0 0
1 2 3 4 5 6 7 8 9 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了方便读者观看，这个串下面的数字是其下标。我们以下标为 $2$ 的这个下标的位置为例，$[2,9]$ 区间内的最长不降子序列是 &lt;code&gt;1 1 1 1 1&lt;/code&gt;，这一位改成 $0$ 后变成 &lt;code&gt;0 1 1 1 1&lt;/code&gt;，不管怎么变长度都不会变，因为其后 $1$ 比 $0$ 多，最长不降子序列一定是连着一坨 $1$。然而对于下标为 $4$ 这个位置的 $1$ 来讲，这一位后面的 $0$ 比 $1$ 多，我们将这一位换成 $0$ 后，$[4,9]$ 区间内的最长不降子序列从 &lt;code&gt;1 1 1&lt;/code&gt; 变成了 &lt;code&gt;0 0 0 0&lt;/code&gt;，不符合我们的构造条件。&lt;/p&gt;
&lt;p&gt;出现这种情况的原因是，对于当前位来讲，它的最长不降子序列只能是一堆 $1$，这是我们刚刚提到过的结论，改成 $0$ 后就有了三种选择，而我们必须让它别无选择，这就要求更改的这一位只能继续选后面连一堆 $1$，那么我们发现这种别无选择的情况就必须让当前位后的 $1$ 的数量比 $0$ 的数量多，这就证明了我们刚刚得出的结论，这道题也就做完了。&lt;/p&gt;
&lt;p&gt;在写代码的时候，我们可以把维护个数改成维护 $0$ 与 $1$ 的个数的差值，这样可以简化代码难度，当 $0$ 的个数减去 $1$ 的个数非正时就把这一位的 $1$ 换掉。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    string s;
    int cnt;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; s;
        for (int i = s.size() - 1; i &amp;gt;= 0; --i) &amp;#123;
            if (s[i] == &#39;0&#39;) &amp;#123; ++cnt; &amp;#125;
            else if (s[i] == &#39;1&#39; &amp;amp;&amp;amp; cnt &amp;lt;= 0) &amp;#123; s[i] = &#39;0&#39;; &amp;#125;
            else &amp;#123; --cnt; &amp;#125;
        &amp;#125;
        cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &#39;\n&#39;;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-09-20T07:41:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/13/CF1537E2%20Erase%20and%20Extend%20(Hard%20Version)/</id>
        <title>题解 CF1537E2 Erase and Extend (Hard Version)</title>
        <link rel="alternate" href="http://example.com/2023/09/13/CF1537E2%20Erase%20and%20Extend%20(Hard%20Version)/"/>
        <content type="html">&lt;h1&gt;CF1537E2 Erase and Extend (Hard Version)&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给你一个字符串，找到该字符串的一个前缀并不断复制，可以删除末尾元素，最终要使得得到的字符串长度为 $k$ 且字典序最小。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;对于此类构造题，我们一般需要运用逆向思维，也就是说我们要从前往后扫而不是从后往前删。为什么这样想呢？我们可以发现，字典序最小当且仅当我们要找的前缀的第 $i$ 位比第 $i \bmod len$ 位的字典序小，这样拼接起来才能够使得字典序最小，这个结论是显然的，证明可以使用反证法。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    int n, k, l = 1;
    string s;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k &amp;gt;&amp;gt; s;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            if (s[i] &amp;lt; s[i % l]) &amp;#123; l = i + 1; &amp;#125;
            else if (s[i] &amp;gt; s[i % l]) &amp;#123; break; &amp;#125;
        &amp;#125;
        for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
            cout &amp;lt;&amp;lt; s[i % l];
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-09-13T12:28:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/09/13/CF1537E1%20Erase%20and%20Extend%20(Easy%20Version)/</id>
        <title>题解 CF1537E1 Erase and Extend (Easy Version)</title>
        <link rel="alternate" href="http://example.com/2023/09/13/CF1537E1%20Erase%20and%20Extend%20(Easy%20Version)/"/>
        <content type="html">&lt;h1&gt;CF1537E1 Erase and Extend (Easy Version)&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给你一个字符串，找到该字符串的一个前缀并不断复制，可以删除末尾元素，最终要使得得到的字符串长度为 $k$ 且字典序最小。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;对于此类构造题，我们一般需要运用逆向思维，也就是说我们要从前往后扫而不是从后往前删。为什么这样想呢？我们可以发现，字典序最小当且仅当我们要找的前缀的第 $i$ 位比第 $i \bmod len$ 位的字典序小 ，这样拼接起来才能够使得字典序最小，这个结论是显然的，证明可以使用反证法。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    int n, k, l = 1;
    string s;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k &amp;gt;&amp;gt; s;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            if (s[i] &amp;lt; s[i % l]) &amp;#123; l = i + 1; &amp;#125;
            else if (s[i] &amp;gt; s[i % l]) &amp;#123; break; &amp;#125;
        &amp;#125;
        for (int i = 0; i &amp;lt; k; ++i) &amp;#123;
            cout &amp;lt;&amp;lt; s[i % l];
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-09-13T03:42:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/31/CF1863C%20MEX%20Repetition/</id>
        <title>题解 CF1863C MEX Repetition</title>
        <link rel="alternate" href="http://example.com/2023/08/31/CF1863C%20MEX%20Repetition/"/>
        <content type="html">&lt;h1&gt;CF1863C MEX Repetition&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定一个 $n$ 个元素的序列 $a$，其中的元素由小于等于 $n$ 的自然数构成且元素之间两两不同。现在定义一种操作，该操作会将第 $i$ 个位置的元素 $a_i$ 替换为该序列中当前没有的最小自然 数。每一轮操作都会从 $1$ 位置一直替换到 $n$。给定整数 $n,k$ 和序列 $a$，其中 $k$ 表示要进行 $k$ 轮操作，要求输出操作后的序列。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;题目中其实有一个诈骗条件。因为序列中的 $n$ 个元素包含小于等于 $n$ 的自然数且两两相同，所以我们可以发现，如果把原序列增加 $1$ 个元素，那么这个序列就变成了 $0 \sim n$ 的一个排列。而我们要替换用的那个数其实就是原序列中没有出现的那个数。我们发现，每当我们替换了一个数字，那么我们必然要用替换下来的这个数字去替换下一个数字，因为被替换下来的这个数字变成了当前序列中缺少的那个数。我们将最开始序列中缺少的那个数放在第 $n + 1$ 个位置。然后我们就可以显然地发现，每次操作实质上就是用第 $i$ 个位置的元素去替换第 $i+1$ 个位置的元素，推广到递推形式就是：&lt;/p&gt;
$$\displaylines{a_{(i+1) \operatorname{mod} (n+1)}= a_{i \operatorname{mod}(n+1)}
}$$&lt;p&gt;现在我们就知道了替换的方法，但是如果我们按照这个递推式进行模拟显然是行不通的，所以我们需要对这个做法进行优化。我们发现，每一轮操作结束后，都相当于把这个序列滚动一次，我们以下面的输入为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;5 5
1 2 3 4 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们把没有出现的元素放在第 $n+1$ 个位置，然后我们每次进行一轮操作并记下来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 2 3 4 5 0
0 1 2 3 4 5
5 0 1 2 3 4
4 5 0 1 2 3
3 4 5 0 1 2 
2 3 4 5 0 1
1 2 3 4 5 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是我们就发现了，这种操作具有循环节，每一轮循环次数等于 $n+1$。原序列的元素顺序也没有太大的改变，所以我们就可以先确认没有第一次操作前没有出现的那个元素的位置，不难发现这个元素的位置等于 $k \operatorname{mod} (n+1)$。那么我们就可以直接做了。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e5 + 7;
    int a[N];
    bool chk[N];
    int T, n, k;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; T;
        while (T--) &amp;#123;
            cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k;
            for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
                cin &amp;gt;&amp;gt; a[i];    
                chk[a[i]] = true;
            &amp;#125;
            int fir;
            for (int i = 0; i &amp;lt;= n; ++i) &amp;#123;
            // 不想写二分了所以直接 O(n) 查
                if (!chk[i]) &amp;#123;
                    fir = i;
                    break;
                &amp;#125;
            &amp;#125;
            a[++n] = fir;
            int xh = k % n, cnt = n - 1;
            int idx = n - xh + 1;
            while (cnt--) &amp;#123;
                if (idx &amp;gt; n) &amp;#123; idx = 1; &amp;#125;
                cout &amp;lt;&amp;lt; a[idx++] &amp;lt;&amp;lt; &#39; &#39;;
            &amp;#125;
            cout &amp;lt;&amp;lt; &#39;\n&#39;;
            memset(chk, 0, sizeof(chk));
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-31T01:18:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/21/P9570%20%E3%80%8CNnOI%20R2-T2%E3%80%8DGlaciaxion/</id>
        <title>题解 洛谷 P9570 「NnOI R2-T2」Glaciaxion</title>
        <link rel="alternate" href="http://example.com/2023/08/21/P9570%20%E3%80%8CNnOI%20R2-T2%E3%80%8DGlaciaxion/"/>
        <content type="html">&lt;h1&gt;洛谷 P9570 「NnOI R2-T2」Glaciaxion&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定一个数 $n$ 和 $m$ 表示有从 $1$ ~ $n$ 的正整数和 $m$ 次操作。每次操作给出一个字母 &lt;code&gt;N&lt;/code&gt; 或 &lt;code&gt;Y&lt;/code&gt;，如果给出 &lt;code&gt;N&lt;/code&gt; 说明有一个数字第一次被选中并输出，如果给出 &lt;code&gt;Y&lt;/code&gt; 就要从刚刚选出来的数里再选一个输出出来。现在要求若干输出里字典序最小的序列，如果无解输出 &lt;code&gt;No solution&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;h3 id=&#34;无解情况&#34;&gt;无解情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当给出 &lt;code&gt;N&lt;/code&gt; 的次数超过 $n$ 时不合法，因为每个数第一次出现的次数总和至多为 $n$。&lt;/li&gt;
&lt;li&gt;当还没有给出 &lt;code&gt;N&lt;/code&gt; 就给出 &lt;code&gt;Y&lt;/code&gt; 时不合法，因为 &lt;code&gt;Y&lt;/code&gt; 不能选出以前没有选出来的数。&lt;/li&gt;
&lt;li&gt;$n$ 或 $m$ 等于 $0$ 的时候不合法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造&#34;&gt;构造&lt;/h3&gt;
&lt;p&gt;下面的分析基于所有合法条件。我们要求最后输出序列字典序最小，所以我们考虑建立一个从 $1$ 开始的指针，当出现 &lt;code&gt;N&lt;/code&gt; 时输出指针，然后指针移动到下一个数。给出 &lt;code&gt;Y&lt;/code&gt; 前一定给出了 &lt;code&gt;N&lt;/code&gt;，而第一次给出 &lt;code&gt;N&lt;/code&gt; 时我们选出的数一定是 $1$，因为它的字典序最小。而既然已经选出来了，后面每一次 &lt;code&gt;Y&lt;/code&gt; 我们都要在已经选出的数里选一个最小的，那么我们选出来的数必然是 $1$。所以我们只需要在输入 &lt;code&gt;N&lt;/code&gt; 的时候输出递增的那个指针并将其自增，输入 &lt;code&gt;Y&lt;/code&gt; 的时候输出 $1$ 就可以了。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e6 + 7;
    int n, m, idx, ncnt, ycnt;
    // ncnt用来记录N的数量，ycnt记录Y的数量
    string s;
    vector&amp;lt;int&amp;gt; ans;// 用来记录答案
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        cin &amp;gt;&amp;gt; s;
        if (!n || !m) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;No solution\n&amp;quot;; return 0; &amp;#125;
        // n或m为0无解
        for (int i = 0; i &amp;lt; m; ++i) &amp;#123;
            if (s[i] == &#39;N&#39;) &amp;#123;
                ++idx;// 指针自增
                ++ncnt;
                ans.emplace_back(idx);// 将指针放入答案序列
            &amp;#125;
            else if (s[i] == &#39;Y&#39;) &amp;#123;
                ++ycnt;
                ans.emplace_back(1);// 输入Y一定输出1
            &amp;#125;
            if (ncnt == 0 &amp;amp;&amp;amp; ycnt) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;No solution\n&amp;quot;; return 0; &amp;#125;
            // 还没输入N就输入了Y无解
        &amp;#125;
        if (ncnt &amp;gt; n) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;No solution\n&amp;quot;; return 0; &amp;#125;
        // 输入N的数量大于n无解
        for (auto it : ans) &amp;#123; cout &amp;lt;&amp;lt; it &amp;lt;&amp;lt; &#39; &#39;; &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-21T02:23:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/19/CF1413C%20Perform%20Easily/</id>
        <title>题解 CF1413C Perform Easily</title>
        <link rel="alternate" href="http://example.com/2023/08/19/CF1413C%20Perform%20Easily/"/>
        <content type="html">&lt;h1&gt;题解 CF1413C Perform Easily&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定一个含有 $6$ 个元素的可重集 $a$，一个数 $n$ 和一个含有 $n$ 个数的可重集 $b$，现在要求 $b$ 中每个数和 $a$ 中任意一个数作差使得作差后得到的新的集合 $b$ 中最大的数和最小的数的差最小。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;首先考虑暴力，每个数最后的值都有 $6$ 种可能，所以总可能数有 $6^n$ 种，显然不行。题目中 $n$ 的大小为 $10^5$，所以我们期待一个 $O(n\log n)$ 的做法。我们发现，所有数也只有 $6$ 种可能，想要枚举答案不可能，但我们可以枚举结果。于是我们想到把 $b$ 中每个元素都和 $a$ 中所有元素作差，最后得到 $6n$ 个数放入一个新的数组 $cp$。因为我们要考虑最大和最小的差最小，所以我们需要使 $cp$ 数组中的值变得有序，于是我们对其进行排序。排序后为了查找的时候保证查找的区间内的数必须包含原来 $b$ 中每个数的至少一种差（显然其每个数都有 $6$ 种差），我们要在插入 $cp$ 前给每个数打好标记，标记它来自于哪个数。&lt;/p&gt;
&lt;p&gt;预处理做完后，我们考虑如何查找答案。因为我们需要一个区间最大值，还需要一个区间最小值，所以我们想到了用双指针来进行查找。我们设左指针为 $lidx$，右指针为 $ridx$。$ridx$ 先走，一直走到与 $lidx$ 间包含了的数包含了原来 $b$ 中每个数的至少一个结果为止。现在开始移动左指针，每移动一次就 $ridx$ 与 $lidx$ 所指的两数之差更新答案。当两指针之间包含的数不能包含原来 $b$ 中每个数的至少一个结果时，就回到第一步重新开始移动 $ridx$，循环一轮即可得到答案。&lt;/p&gt;
&lt;p&gt;枚举复杂度为 $O(n)$，排序复杂度为 $O(n\log n)$，最后搜索的复杂度为 $O(n)$，所以整个算法的时间复杂度为 $O(n\log n)$，于是我们做完了，下面是代码。&lt;/p&gt;
&lt;h3 id=&#34;参考代码&#34;&gt;参考代码&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e6 + 7, INF = 1e9;
    struct node &amp;#123; int val, id; &amp;#125;cp[N];
    int n, idx, ans = INF;
    int a[7], b[N], cnt[N];
    bool cmp(node x, node y) &amp;#123; return x.val &amp;lt; y.val; &amp;#125;
    int work()
    &amp;#123;
        for (int i = 1; i &amp;lt;= 6; ++i) &amp;#123; cin &amp;gt;&amp;gt; a[i]; &amp;#125;
        cin &amp;gt;&amp;gt; n;
        if (n == 1) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;0\n&amp;quot;; return 0; &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            cin &amp;gt;&amp;gt; b[i];
            for (int j = 1; j &amp;lt;= 6; ++j) &amp;#123;
                cp[++idx] = &amp;#123;b[i] - a[j], i&amp;#125;;
            &amp;#125;
            cnt[i] = 0;
        &amp;#125;// 加标记
        sort(cp + 1, cp + idx + 1, cmp);
        int lidx = 1, ridx = 0, ncnt = 0;
        // cnt数组和ncnt用来维护当前区间包含原来b数组中的数的结果的个数
        while (ridx &amp;lt; idx) &amp;#123;
            // 双指针搜索
            if (!cnt[cp[++ridx].id]) &amp;#123; ++ncnt; &amp;#125;
            ++cnt[cp[ridx].id];
            while (lidx &amp;lt; ridx &amp;amp;&amp;amp; cp[ridx].val - cp[lidx].val &amp;gt;= ans) &amp;#123;
                if (cnt[cp[lidx].id] == 1) &amp;#123; --ncnt; &amp;#125;
                --cnt[cp[lidx].id];
                ++lidx;
            &amp;#125;
            // 移动左指针到可行方案处
            while (lidx &amp;lt; ridx &amp;amp;&amp;amp; ncnt == n) &amp;#123;
                ans = min(ans, cp[ridx].val - cp[lidx].val);
                if (cnt[cp[lidx].id] == 1) &amp;#123; --ncnt; &amp;#125;
                --cnt[cp[lidx].id];
                ++lidx;
            &amp;#125; 
            // 移动左指针并不断更新答案
        &amp;#125;
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; &#39;\n&#39;;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-19T15:18:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/18/AT_arc132_a%20Permutation%20Grid/</id>
        <title>题解 AT_arc132_a Permutation Grid</title>
        <link rel="alternate" href="http://example.com/2023/08/18/AT_arc132_a%20Permutation%20Grid/"/>
        <content type="html">&lt;h1&gt;题解  AT_arc132_a Permutation Grid&lt;/h1&gt;
&lt;h4 id=&#34;简要题意：&#34;&gt;简要题意：&lt;/h4&gt;
&lt;p&gt;给定两个数列 $R$ 和 $C$ ，$R$ 和 $C$ 内均有 $n$ 个元素，要求根据 $R$ 和 $C$ 对一个 $n\times n$ 的矩阵进行染色，使得第 $i$ 行有 $R_i$ 个黑色块，第 $j$ 列有 $C_j$ 个黑色块。&lt;strong&gt;最后，$R$ 和 $C$ 均为 $1-n$ 的一个排列。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;反思分析：&#34;&gt;&lt;s&gt;反思&lt;/s&gt;分析：&lt;/h4&gt;
&lt;p&gt;&lt;s&gt;有个伸臂和一个神犇在赛时没有看到最后一个条件导致两个人想出了各种各样复杂又奇葩的做法，我不说是谁&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;有了排列那这不成水题了，我们以样例为例（这什么话）把它按顺序重新排列一下，就会变成这样（我们用$W$表示白色，$B$表示黑色）：&lt;/p&gt;
&lt;p&gt;$R=5,2,3,4,1\Rightarrow R=1,2,3,4,5$&lt;/p&gt;
&lt;p&gt;$C=4,2,3,1,5\Rightarrow C=1,2,3,4,5$&lt;/p&gt;
&lt;p&gt;$
\begin{matrix}
   &amp;amp; 1&amp;amp;  2&amp;amp;  3&amp;amp;  4&amp;amp; 5&amp;amp;\\
  1&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp; B\\
  2&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp;  B&amp;amp; B\\
  3&amp;amp;  W&amp;amp;  W&amp;amp;  B&amp;amp;  B&amp;amp; B\\
  4&amp;amp;  W&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp; B\\
  5&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp; B
\end{matrix}
$&lt;/p&gt;
&lt;p&gt;我们稍加观察，然后&lt;strong&gt;惊奇地&lt;/strong&gt;发现，坐标为$x,y$的块是黑色当且仅当$R_x+C_y&amp;gt;n$，然后我们恢复原序列&lt;br&gt;
$
\begin{matrix}
   &amp;amp; 4&amp;amp;  2&amp;amp;  3&amp;amp;  1&amp;amp; 5&amp;amp;\\
  5&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp; B\\
  2&amp;amp;  B&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp; B\\
  3&amp;amp;  B&amp;amp;  W&amp;amp;  B&amp;amp;  W&amp;amp; B\\
  4&amp;amp;  B&amp;amp;  B&amp;amp;  B&amp;amp;  W&amp;amp; B\\
  1&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp;  W&amp;amp; B
\end{matrix}
$&lt;br&gt;
发现这个性质仍然存在！&lt;/p&gt;
&lt;p&gt;我们可以通过简单地平移来证明这种做法的正确性，而代码也就相应的非常好写了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e5 + 7;
    int r[N],c[N];
    int n, q;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123; cin &amp;gt;&amp;gt; r[i]; &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123; cin &amp;gt;&amp;gt; c[i]; &amp;#125;
        cin &amp;gt;&amp;gt; q;
        for (int i = 1, x, y; i &amp;lt;= q; ++i) &amp;#123;
            cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            if (r[x] + c[y] &amp;gt; n) &amp;#123; cout &amp;lt;&amp;lt; &#39;#&#39;; &amp;#125;
            else &amp;#123; cout &amp;lt;&amp;lt; &#39;.&#39;; &amp;#125;
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-18T09:03:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/18/CF1413D%20Shurikens/</id>
        <title>题解 CF1413D Shurikens</title>
        <link rel="alternate" href="http://example.com/2023/08/18/CF1413D%20Shurikens/"/>
        <content type="html">&lt;h1&gt;题解 CF1413D Shurikens&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定一个 $n$ 和 $2n$ 个操作，第一种操作 “+” 表示从 $1$ ~ $n$ 中选择一个数插入序列，第二种操作 &amp;quot; - $x$&amp;quot; 表示从当前序列中删除 $x$ 且 $x$ 为当前序列里的最小值，根据给出的操作来推断将数插入序列的合法顺序。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;h3 id=&#34;不合法情况&#34;&gt;不合法情况&lt;/h3&gt;
&lt;p&gt;不合法的情况有两种。第一种是当在连续取出的两个值中，后取出的值比前取出的值小，因为每次必须取出序列里最小的值，所以这种情况显然是不符合要求的。第二种情况是取出的操作数比放入的操作数多，这样显然也是不合法的。&lt;/p&gt;
&lt;h3 id=&#34;如何处理合法情况&#34;&gt;如何处理合法情况&lt;/h3&gt;
&lt;p&gt;我们看到这种有进有出的结构能够想到什么，怎么才能反转操作呢？我们很自然地想到可以用栈来实现。我们倒着进行操作，遇到取数操作就把取出来的数压入栈 $s$，遇到插入操作就把 $s$ 栈顶元素弹出来塞进另一个栈 $ans$ 里，最后把 $ans$ 里的元素依次弹出就是答案所要的序列了。按照刚刚讨论过的不合法情况，当 $s$ 中入栈元素比栈顶元素大则不合法，如果需要弹出时栈 $s$ 为空则不合法。&lt;/p&gt;
&lt;h3 id=&#34;正确性证明&#34;&gt;正确性证明&lt;/h3&gt;
&lt;p&gt;因为每次都要取序列中的最小值，所以后出来的元素一定是更大的，我们就默认它插入得更早。而倒序插入的时候保证了小的元素一定后进栈，所以也不会出现弹出一个数时它还没插入的情况。当 $s$ 入栈元素大于栈顶元素，就相当于操作时取出的值不是最小值；而当弹栈时栈空了，就说明插入的数量少于取出的数量，刚好就对应上了上面分析的不合法情况。由此就可以判断出其正确性。&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;stack&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    stack&amp;lt;int&amp;gt; s;
    stack&amp;lt;int&amp;gt; ans;
    vector&amp;lt;int&amp;gt; opt;// 记录操作
    int n;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n;
        for (int i = 1; i &amp;lt;= 2 * n; ++i) &amp;#123;
            char op; int x;
            cin &amp;gt;&amp;gt; op;
            if (op == &#39;+&#39;) &amp;#123; opt.emplace_back(0); &amp;#125;
            else if(op == &#39;-&#39;) &amp;#123; cin &amp;gt;&amp;gt; x; opt.emplace_back(x); &amp;#125;
        &amp;#125;
        for (int i = opt.size() - 1; i &amp;gt;= 0; --i) &amp;#123;
            // 倒着复现操作
            if (!opt[i]) &amp;#123;
                if (s.empty()) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;; return 0; &amp;#125;
                // 插入的数量少于取出的数量
                else &amp;#123; ans.push(s.top()); s.pop(); &amp;#125;
            &amp;#125;
            else &amp;#123;
                if (s.size() &amp;amp;&amp;amp; opt[i] &amp;gt; s.top()) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;; return 0; &amp;#125;
                // 操作时取出的值不是最小值
                else &amp;#123; s.push(opt[i]); &amp;#125;
            &amp;#125;
        &amp;#125;
        cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;; 
        while (!ans.empty()) &amp;#123; cout &amp;lt;&amp;lt; ans.top() &amp;lt;&amp;lt; &#39; &#39;; ans.pop(); &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-18T03:15:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2023/08/18/P3514%20[POI2011]%20LIZ-Lollipop/</id>
        <title>题解 洛谷 P3514 [POI2011] LIZ-Lollipop</title>
        <link rel="alternate" href="http://example.com/2023/08/18/P3514%20[POI2011]%20LIZ-Lollipop/"/>
        <content type="html">&lt;h1&gt;P3514 [POI2011] LIZ-Lollipop&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给定一个只有 $1$ 和 $2$ 的序列，给出 $m$ 次询问，每次询问给出一个数 $k$，查询序列中有没有一个子串和为 $k$，如果有则输出区间两端点，如果没有输出 &lt;code&gt;NIE&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;本题最重要的条件就是该序列中只含有 $1$ 和 $2$，因为这个条件，我们就可以得到下面这个性质：&lt;strong&gt;若 $k$ 可以被表示，则 $k-2$ 也一定可以被表示&lt;/strong&gt;。这个性质很容易被证明。我们很容易发现，一个区间的两端点有三种情况，全为 $1$，全为 $2$ 以及一边 $1$ 一边 $2$。那么当两边存在 $2$ 时，只需要减掉这个 $2$ 即可；如果是两个 $1$，那么把这两个 $1$ 一起减掉即可。&lt;/p&gt;
&lt;p&gt;现在我们知道了上面这个性质，开始考虑非法情况。既然 $k-2$ 可以被表示，那么我们只需要找到最大的 $k$ 就可以了。如果给出的 $k$ 比我们能找到的最大的数还大，那么这个数是不合法的。&lt;/p&gt;
&lt;p&gt;考虑完非法情况以后，我们来考虑如何求解。我们发现，一个数减去 $2$ 后奇偶性不变，也就是说如果 $k$ 是奇数，那么我们将永远无法得到偶数，反之亦然，所以这要求我们分类讨论，分别求出最大的奇数和最大的偶数。因为题目告诉我们序列长度 $n \le 10^6$，也就是说能够被表示出来的数最多有 $2 \times 10^6$ 种。我们可以提前将这些数的左右区间都预处理出来，然后 $O(1)$ 查询即可。处理这些数的方法是将最大的奇数和偶数分别缩减，每次缩减 $2$ 并记下左右区间，按照最开始分析的性质来移动左右指针，知道两指针相遇为止。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e6 + 7;
    int a[N];
    int n, m, jmax, omax, sum;
    struct node &amp;#123; int l, r; &amp;#125;b[N &amp;lt;&amp;lt; 1];
    
    inline void _init() &amp;#123;
        int jlidx, jridx, olidx, oridx, tmp1, tmp2, tag1, tag2;
        jlidx = olidx = 1; jridx = oridx = n; tmp1 = tmp2 = 0;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            tmp1 += a[i];
            if (a[i] == 1) &amp;#123; tag1 = i + 1; break; &amp;#125;
        &amp;#125;
        for (int  i = n; i &amp;gt;= 1; --i) &amp;#123;
            tmp2 += a[i];
            if (a[i] == 1) &amp;#123; tag2 = i - 1; break; &amp;#125;
        &amp;#125;
        if (sum % 2) &amp;#123;
            jmax = sum;
            if (tmp1 &amp;lt; tmp2) &amp;#123;
                omax = sum - tmp1;
                olidx = tag1;
            &amp;#125;
            else &amp;#123;
                omax = sum - tmp2;
                oridx = tag2;
            &amp;#125;
        &amp;#125;
        else &amp;#123;
            omax = sum;
            if (tmp1 &amp;lt; tmp2) &amp;#123;
                jmax = sum - tmp1;
                jlidx = tag1; 
            &amp;#125;
            else &amp;#123;
                jmax = sum - tmp2;
                jridx = tag2;
            &amp;#125;
        &amp;#125;
        
        //----以上处理最大的奇数和偶数以及其左右端点----
        //----以下分别缩减奇偶数得到所有数的左右端点----
        
        int otmp = omax, jtmp = jmax;
        b[omax] = &amp;#123;olidx, oridx&amp;#125;;
        b[jmax] = &amp;#123;jlidx, jridx&amp;#125;; 
        while (olidx &amp;lt; oridx &amp;amp;&amp;amp; otmp &amp;gt; 0) &amp;#123;
            otmp -= 2;
            if (a[olidx] == 1) &amp;#123;
                if (a[oridx] == 1) &amp;#123; b[otmp] = &amp;#123;++olidx, --oridx&amp;#125;; &amp;#125;
                else if (a[oridx] == 2) &amp;#123; b[otmp] = &amp;#123;olidx, --oridx&amp;#125;; &amp;#125;
            &amp;#125;
            else if (a[olidx] == 2) &amp;#123; b[otmp] = &amp;#123;++olidx, oridx&amp;#125;; &amp;#125;
        &amp;#125;
        while (jlidx &amp;lt; jridx &amp;amp;&amp;amp; jtmp &amp;gt; 0) &amp;#123;
            jtmp -= 2;
            if (a[jlidx] == 1) &amp;#123;
                if (a[jridx] == 1) &amp;#123; b[jtmp] = &amp;#123;++jlidx, --jridx&amp;#125;; &amp;#125;
                else if (a[jridx] == 2) &amp;#123; b[jtmp] = &amp;#123;jlidx, --jridx&amp;#125;; &amp;#125;
            &amp;#125;
            else if (a[jlidx] == 2) &amp;#123; b[jtmp] = &amp;#123;++jlidx, jridx&amp;#125;; &amp;#125;
        &amp;#125;
        return;
    &amp;#125;
    
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            char c; cin &amp;gt;&amp;gt; c;
            if (c == &#39;T&#39;) &amp;#123; a[i] = 2; &amp;#125;
            else if (c == &#39;W&#39;) &amp;#123; a[i] = 1; &amp;#125;
            sum += a[i];
        &amp;#125;
        _init();
        while (m--) &amp;#123;
            int sar; cin &amp;gt;&amp;gt; sar;
            if (sar % 2 &amp;amp;&amp;amp; sar &amp;gt; jmax) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;NIE\n&amp;quot;; continue; &amp;#125;
            else if (!(sar % 2) &amp;amp;&amp;amp; sar &amp;gt; omax) &amp;#123; cout &amp;lt;&amp;lt; &amp;quot;NIE\n&amp;quot;; continue; &amp;#125;
            cout &amp;lt;&amp;lt; b[sar].l &amp;lt;&amp;lt; &#39; &#39; &amp;lt;&amp;lt; b[sar].r &amp;lt;&amp;lt; &#39;\n&#39;;
        &amp;#125;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="构造" />
        <updated>2023-08-18T03:15:00.000Z</updated>
    </entry>
</feed>
