{
    "version": "https://jsonfeed.org/version/1",
    "title": "NERV - SN • All posts by \"贪心\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/02/P2376%20[USACO09OCT]%20Allowance%20G/",
            "url": "http://example.com/2023/09/02/P2376%20[USACO09OCT]%20Allowance%20G/",
            "title": "题解 洛谷 P2376 [USACO09OCT] Allowance G",
            "date_published": "2023-09-02T03:43:00.000Z",
            "content_html": "<h1>P2376 [USACO09OCT] Allowance G</h1>\n<h2 id=\"简要题意\">简要题意</h2>\n<p>给你 $n$ 种面值的货币，其中货币中面值小的货币的面值可以整除面值大的货币的面值，给你每种面值货币的数量。每周都要给贝茜发至少 $c$ 元的工资，问最多能发多少周。</p>\n<h2 id=\"策略分析\">策略分析</h2>\n<p>首先对于面值大于 $c$ 的货币，显然我们每周给出一张就行了，没有其它办法，所以可以直接把它们的数量加在答案中。接下来是对于面值小于 $c$ 的货币，我们先对所有货币按照面值降序排序，每次选取能够选的最大的，然后再用最小的去填补剩下的那一点点价格缝隙，因为我们有小面值货币面值是大面值货币面值因数这个条件，所以最大配最小这种做法一定会产生最小的浪费，从而得到最优解。如果这一次凑不出来了，那显然是钱不够了，那么所有情况就统计完毕，输出答案即可。</p>\n<h2 id=\"参考代码\">参考代码</h2>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#define PII pair&lt;int, int&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    vector&lt;PII&gt; v;\n    //v.first 代表面值，v.second 代表货币数量\n    int n, c, ans; \n    bool cmp(PII x, PII y) &#123; return x.first &gt; y.first; &#125;\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; c;\n        for (int i = 1, val, b; i &lt;= n; ++i) &#123;\n            cin &gt;&gt; val &gt;&gt; b;\n            if (val &gt;= c) &#123; ans += b; &#125;\n            else &#123; v.push_back(&#123;val, b&#125;); &#125;\n        &#125;\n        sort(v.begin(), v.end(), cmp);\n        while (true) &#123;\n            int tmp = c;\n            for (int i = 0; i &lt; v.size(); ++i) &#123;\n                while (tmp &amp;&amp; v[i].second &amp;&amp; tmp &gt;= v[i].first) &#123;\n                    tmp -= v[i].first; \n                    --v[i].second;\n                &#125;\n            &#125;\n            if (tmp &gt; 0) &#123;\n                for (int i = v.size() - 1; i &gt;= 0; --i) &#123;\n                    if (v[i].second &amp;&amp; v[i].first &gt;= tmp) &#123;\n                        tmp -= v[i].first;\n                        --v[i].second;\n                        break;\n                    &#125;\n                &#125;\n            &#125;\n            if (tmp &gt; 0) &#123; break; &#125;\n            ++ans;\n        &#125;\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n",
            "tags": [
                "贪心"
            ]
        },
        {
            "id": "http://example.com/2023/08/28/P5019%20[NOIP2018%20%E6%8F%90%E9%AB%98%E7%BB%84]%20%E9%93%BA%E8%AE%BE%E9%81%93%E8%B7%AF/",
            "url": "http://example.com/2023/08/28/P5019%20[NOIP2018%20%E6%8F%90%E9%AB%98%E7%BB%84]%20%E9%93%BA%E8%AE%BE%E9%81%93%E8%B7%AF/",
            "title": "题解 洛谷 P5019 [NOIP2018 提高组] 铺设道路",
            "date_published": "2023-08-28T02:15:00.000Z",
            "content_html": "<h1>P5019 [NOIP2018 提高组] 铺设道路</h1>\n<p>本题还有一道<a href=\"https://www.luogu.com.cn/problem/P1969\">姐妹题</a>，两题题意一样，代码也一模一样。</p>\n<h2 id=\"简要题意\">简要题意</h2>\n<p>给你一个序列，每次选取一个区间对这个区间内所有数都减去 $1$，使得区间内至少一个数变成 $0$，重复执行这一过程直到整个序列都为 $0$，求最小操作次数。</p>\n<h2 id=\"策略分析\">策略分析</h2>\n<p>本题可以用贪心在 $O(n)$ 复杂度完成。</p>\n<h3 id=\"操作方法\">操作方法</h3>\n<p>我们可以从头往尾扫，设第 $i$ 个位置的值为 $v_i$，当第 $i$ 个位置的值大于第 $i-1$ 个位置的值时，我们就要给答案加上 $v_{i-1}-v_i$，否则不操作。为了后面能够正常操作，第一次必须将第一个位置的直接减到 $0$。</p>\n<h3 id=\"正确性证明\">正确性证明</h3>\n<p>考虑如果 $v_i \\le v_{i-1}$， 那我们在填第 $i-1$ 个坑的时候一定可以把第 $i$ 个坑填上；而当 $v_i&gt; v_{i-1}$ 时，我们填第$i$ 个坑的时候又可以顺便把第 $i-1$ 个坑填上，由此递推即可得出答案。</p>\n<h2 id=\"代码\">代码</h2>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    const int N = 1e5 + 7;\n    int v[N];\n    long long ans;\n    int work()\n    &#123;\n        int n;\n        cin &gt;&gt; n;\n        for (int i = 1; i &lt;= n; ++i) &#123; cin &gt;&gt; v[i]; &#125;\n        ans = v[1];\n        for (int i = 2; i &lt;= n; ++i) &#123;\n            if (v[i] &gt; v[i - 1]) &#123;\n                ans += (v[i] - v[i - 1]);\n            &#125;\n        &#125;\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n",
            "tags": [
                "贪心"
            ]
        }
    ]
}