<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>NERV - SN • Posts by &#34;枚举&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-08-29T08:09:00.000Z</updated>
    <category term="OIer 日记" />
    <category term="图论" />
    <category term="构造" />
    <category term="二进制;位运算" />
    <category term="栈" />
    <category term="哈夫曼树;哈夫曼编码" />
    <category term="枚举" />
    <category term="构造;二进制;枚举" />
    <category term="二进制" />
    <category term="二进制;高精度" />
    <category term="平面几何" />
    <category term="分治" />
    <category term="对顶堆;数据结构" />
    <category term="平衡树;数据结构" />
    <category term="线段树;数据结构" />
    <category term="贪心" />
    <category term="矩阵乘法;倍增" />
    <category term="数学" />
    <category term="线性筛" />
    <category term="割边;Tarjan" />
    <category term="割点;Tarjan" />
    <category term="容斥;根号分治" />
    <category term="状态压缩;容斥" />
    <category term="矩阵加速;动态规划" />
    <category term="雷电法王" />
    <entry>
        <id>http://example.com/2023/08/29/CF690F1%20Tree%20of%20Life%20(easy)/</id>
        <title>题解 CF690F1 Tree of Life (easy)</title>
        <link rel="alternate" href="http://example.com/2023/08/29/CF690F1%20Tree%20of%20Life%20(easy)/"/>
        <content type="html">&lt;h1&gt;CF690F1 Tree of Life (easy)&lt;/h1&gt;
&lt;h2 id=&#34;简要题意&#34;&gt;简要题意&lt;/h2&gt;
&lt;p&gt;给你一棵树，求树上长度为 $2$ 的路径条数&lt;/p&gt;
&lt;h2 id=&#34;策略分析&#34;&gt;策略分析&lt;/h2&gt;
&lt;p&gt;我们看下面这张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2023/08/29/pPdSEL9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们发现对于点 $u,v$，$v$ 是与 $u$ 相连的一个点，从 $u$ 出发的长度为 $2$ 的路径条数就等于 $v$ 的度数减去 $1$，因为 $u$ 本身也和 $v$ 相连，所以要把自己减掉。比如说上面这张图中，与 $1$ 距离为 $2$ 的点有 $6,7,8,9,5$ 这 $5$ 个，而 $1$ 的三个子节点的度数分别为 $3,3,2$，分别减去 $1$ 再相加刚好是 $5$。&lt;/p&gt;
&lt;p&gt;我们对这整张图统计以后，其实对于每一个点我们都统计了与它距离为 $2$ 的点，因为存图时是无向图，所以同一条路径一定计算了两次，累加的答案要减半。&lt;/p&gt;
&lt;p&gt;时间复杂度 $O(n^2)$。&lt;/p&gt;
&lt;h2 id=&#34;参考代码&#34;&gt;参考代码&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;vector&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e4 + 7;
    vector&amp;lt;int&amp;gt; edge[N];
    int n, sum;
    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n;
        for (int i = 1, x, y; i &amp;lt; n; ++i) &amp;#123;
            cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
            edge[x].emplace_back(y);
            edge[y].emplace_back(x);
        &amp;#125;
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            for (auto it : edge[i]) &amp;#123; 
                sum += edge[it].size() - 1; 
            &amp;#125;
        &amp;#125;
        sum &amp;gt;&amp;gt;= 1;
        cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &#39;\n&#39;;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="枚举" />
        <updated>2023-08-29T08:09:00.000Z</updated>
    </entry>
</feed>
