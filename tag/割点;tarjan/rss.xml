<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>NERV - SN • Posts by &#34;割点;tarjan&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-cn</language>
        <pubDate>Thu, 24 Aug 2023 09:15:00 +0800</pubDate>
        <lastBuildDate>Thu, 24 Aug 2023 09:15:00 +0800</lastBuildDate>
        <category>二进制;位运算</category>
        <category>构造</category>
        <category>哈夫曼树;哈夫曼编码</category>
        <category>栈</category>
        <category>构造;二进制;枚举</category>
        <category>枚举</category>
        <category>平面几何</category>
        <category>二进制</category>
        <category>二进制;高精度</category>
        <category>对顶堆;数据结构</category>
        <category>线段树;数据结构</category>
        <category>分治</category>
        <category>平衡树;数据结构</category>
        <category>贪心</category>
        <category>割点;Tarjan</category>
        <category>数学</category>
        <category>割边;Tarjan</category>
        <category>线性筛</category>
        <category>状态压缩;容斥</category>
        <category>容斥;根号分治</category>
        <category>图论</category>
        <category>矩阵加速;动态规划</category>
        <category>矩阵乘法;倍增</category>
        <category>OIer 日记</category>
        <category>雷电法王</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/08/24/P5058%20[ZJOI2004]%20%E5%97%85%E6%8E%A2%E5%99%A8/</guid>
            <title>题解 洛谷 P5058 [ZJOI2004] 嗅探器</title>
            <link>http://example.com/2023/08/24/P5058%20[ZJOI2004]%20%E5%97%85%E6%8E%A2%E5%99%A8/</link>
            <category>割点;Tarjan</category>
            <pubDate>Thu, 24 Aug 2023 09:15:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;P5058 [ZJOI2004] 嗅探器&lt;/h1&gt;
&lt;h3 id=&#34;简要题意&#34;&gt;简要题意&lt;/h3&gt;
&lt;p&gt;给定一张图，再给处图中两个点 $x,y$，现在要在图中删去除了 $x,y$ 以外的一个点使得 $x$ 和 $y$ 不再连通，求要删除的点的编号&lt;/p&gt;
&lt;h3 id=&#34;题目分析&#34;&gt;题目分析&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://oi-wiki.org/graph/cut/&#34;&gt;前置芝士&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目要求我们删掉一个点使得给定的两个点不连通，那么其实我们就是要找一个满足要求的割点，如下图标黑的点就是题目给定的两个点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2023/08/23/pPJqc80.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点 $1$ 是一个割点，我们删除点 $1$ 即可使得 $2,4$ 两点不连通，但是并非任意割点都满足要求，比方说下面这张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2023/08/23/pPJqg2V.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点 $3$ 和点 $4$ 都是图中的割点，但是删去 $4$ 并不能使得目标点 $1,7$ 不连通，所以只有点 $3$ 是符合条件的点，那么我们就要去筛选割点中符合要求的点。&lt;/p&gt;
&lt;p&gt;怎么筛呢？其实我们想一想建立 DFS 树的过程，我们从题中给定的一个点开始搜，那么对于一个符合条件的割点来讲，题中给定的另一个点一定在这个符合条件的割点的子树中。所以在搜的时候加个判断条件就好了。本题因为不能删去根，所以不用考虑根是割点的情况，那么代码也就非常简单：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
using namespace std;

namespace SHAWN &amp;#123;
    const int N = 1e6 + 7;
    int head[N], cnt;
    struct edge &amp;#123; int to, next; &amp;#125;edge[N];
    int n, tim, x, y;
    int dfn[N], low[N];
    bool vis[N], flag[N];

    inline void add(int u, int v) &amp;#123;
        edge[++cnt].next = head[u];
        edge[cnt].to = v;
        head[u] = cnt;
    &amp;#125;

    void Tarjan(int u, int fa) &amp;#123;
        low[u] = dfn[u] = ++tim;
        vis[u] = true;
        for (int i = head[u]; i; i = edge[i].next) &amp;#123;
            int v = edge[i].to;
            if (!vis[v]) &amp;#123;
                Tarjan(v, u);
                low[u] = min(low[u], low[v]);
                // 这里多加一个u!=x和dfn[y]&amp;gt;=dfn[v]的特判就OK了
                if (fa != u &amp;amp;&amp;amp; low[v] &amp;gt;= dfn[u] &amp;amp;&amp;amp; u != x &amp;amp;&amp;amp; dfn[y] &amp;gt;= dfn[v]) &amp;#123;
                    flag[u] = true;
                &amp;#125;
            &amp;#125;
            else if (fa != v) &amp;#123;
                low[u] = min(low[u], dfn[v]);
            &amp;#125;
        &amp;#125;
    &amp;#125;

    int work()
    &amp;#123;
        cin &amp;gt;&amp;gt; n;
        while (cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y &amp;amp;&amp;amp; x &amp;amp;&amp;amp; y) &amp;#123;
            add(x, y); add(y, x);
        &amp;#125;
        cin &amp;gt;&amp;gt; x &amp;gt;&amp;gt; y;
        Tarjan(x, x);
        for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;
            if (flag[i]) &amp;#123;
                cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &#39;\n&#39;;
                return 0;
            &amp;#125;
        &amp;#125;
        cout &amp;lt;&amp;lt; &amp;quot;No solution\n&amp;quot;;
        return 0;
    &amp;#125;
&amp;#125;

signed int main() &amp;#123;
    ios :: sync_with_stdio(false);
    cin.tie(nullptr);
    return SHAWN :: work();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
