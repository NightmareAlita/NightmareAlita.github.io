{
    "version": "https://jsonfeed.org/version/1",
    "title": "NERV - SN",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/07/Tarjan/",
            "url": "http://example.com/2023/09/07/Tarjan/",
            "title": "Tarjan 基础用法",
            "date_published": "2023-09-07T08:18:38.000Z",
            "content_html": "<h1>$\\operatorname{Tarjan}$ 基础用法</h1>\n<p>[TOC]</p>\n<h2 id=\"operatorname-Tarjan-求最近公共祖先\">$\\operatorname{Tarjan}$ 求最近\t公共祖先</h2>\n<h3 id=\"前置芝士\">前置芝士</h3>\n<p><strong>最近公共祖先(Lowest Common Ancestor , LCA)</strong>：一棵树中两个结点的 公共祖先里面，离根最远的那个被称为最近公共祖先。我们记点集 $S=\\{v_1,v_2,\\dots,v_n\\}$ 的最近公共祖先为 $\\operatorname{LCA}(v_1,v_2,\\dots,v_n)$ 或 $\\operatorname{LCA}(S)$。</p>\n<p><strong>性质</strong>：</p>\n<ul>\n<li>$\\operatorname{LCA}(\\{u\\}=u)$；</li>\n<li>$u$ 是 $v$ 的祖先当且仅当 $\\operatorname{LCA}(u,v)=u$；</li>\n<li>若 $u$ 和 $v$ 互相都不是对方的祖先，则 $u,v$ 分别处于 $\\operatorname{LCA}(u,v)$ 的两棵不同子树中；</li>\n<li>前序遍历，$\\operatorname{LCA}(S)$ 出现在所有 $S$ 中元素之前，后序遍历，$\\operatorname{LCA}(S)$ 出现在所有 $S$ 中元素之后；</li>\n<li>两点集的并的最近公共祖先为两点集各自最近公共祖先的最近公共祖先，即$\\operatorname{LCA}(A \\cup B)=\\operatorname{LCA}(\\operatorname{LCA}(A),\\operatorname{LCA}(B))$；</li>\n<li>两结点的最近公共祖先一定在其这两点最短路上</li>\n<li>设 $d$ 为树上两点间的距离，$h$ 为一个点到树根的距离，则 $d_{uv}=h_u+h_v-2h(\\operatorname{LCA}(u,v))$</li>\n</ul>\n<h3 id=\"实现过程\">实现过程</h3>\n<p>请注意啦，$\\operatorname{Tarjan}$ 是一个离线算法，所以只能处理离线的 $\\operatorname{LCA}$ 询问，在线需要使用其它方法。但是 $\\operatorname{Tarjan}$ 可以在一次搜索后求出所有点对的 $\\operatorname{LCA}$，所以仍然具有研究价值。</p>\n<ol>\n<li>首先我们要建立两个链表，$edge$ 用来存树，而 $qedge$ 用来存储一种查询关系，即对于一个点 $u$，$qedge$ 要记录点 $u$ 都与哪些其它点存在询问；</li>\n<li>接下来我们对整棵树开始 $\\operatorname{DFS}$，用 $vis$ 记录是否访问过，用 $fa_i$ 表示 $i$ 的父亲，由于 $\\operatorname{DFS}$ 的基本思想是每次只关心当前这一级，所以我们认为当前搜到的点 $u$ 就是以 $u$ 为根的子树的根，<s>这句话看似是废话其实也是废话</s>，这么写是为了提醒读者在搜索开始时要把这个点的父亲设置为自己，也就是非常容易遗忘的初始化操作；</li>\n<li>回溯的时候将 $fa_v$ 设置为 $u$，也就是逐级递归找爸爸；</li>\n<li>在回溯期间，如果包含当前节点的查询的另一个结点也访问过了，就可以更新这两个点的 $\\operatorname{LCA}$ 了；</li>\n<li>最后统计输出答案的时候，不要忘记使用刚刚我们学到的最后一个性质来辅助我们。</li>\n</ol>\n<p>核心代码就长这样：</p>\n<pre><code class=\"language-cpp\">void Tarjan(int u) &#123;// 递归每一层都处理当前节点的子树\n    fa[u] = u;// 初始化\n    vis[u] = true;\n    for (int i = head[u]; i; i = edge[i].next) &#123;// 向下搜索\n        int v = edge[i].to;\n        if (!vis[v]) &#123;\n            Tarjan(v);\n            fa[v] = u;\n        &#125;\n    &#125;\n    for (int i = qhead[u]; i; i = qedge[i].next) &#123;\n        // 搜索并标记含有 u 结点的所有询问\n        int v = qedge[i].to;\n        if (vis[v]) &#123;// 两个结点必须都被标记过\n            qedge[i].lca = find(v);// 标记 LCA\n            // 2n-1与2n的结果相同\n            if (i % 2) &#123; qedge[i + 1].lca = qedge[i].lca; &#125;\n            else &#123; qedge[i - 1].lca = qedge[i].lca; &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"例题\">例题</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P3379\">模板 最近公共祖先（LCA）</a></p>\n<p>这就是个模板题，把上面那段代码套上去补完剩下的建图部分就可以了，所以不必过多赘述。</p>\n<p>参考代码：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    const int N = 1e6 + 7;\n    int head[N], cnt;\n    int qhead[N], qcnt;\n    struct node &#123; int to, next, lca; &#125;;\n    node edge[N], qedge[N]; \n    int n, m, s;\n    int fa[N];\n    bool vis[N];\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n    inline void qadd(int u, int v) &#123;\n        qedge[++qcnt].next = qhead[u];\n        qedge[qcnt].to = v;\n        qhead[u] = qcnt;\n    &#125;\n    int find(int x) &#123;\n        return x == fa[x] ? x : fa[x] = find(fa[x]);\n    &#125;\n\n    void Tarjan(int u) &#123;\n        fa[u] = u;\n        vis[u] = true;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!vis[v]) &#123;\n                Tarjan(v);\n                fa[v] = u;\n            &#125;\n        &#125;\n        for (int i = qhead[u]; i; i = qedge[i].next) &#123;\n            int v = qedge[i].to;\n            if (vis[v]) &#123;\n                qedge[i].lca = find(v);\n                if (i % 2) &#123; qedge[i + 1].lca = qedge[i].lca; &#125;\n                else &#123; qedge[i - 1].lca = qedge[i].lca; &#125;\n            &#125;\n        &#125;\n    &#125;\n    \n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;\n        for (int i = 1, x, y; i &lt; n; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y); add(y, x);\n        &#125;\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            qadd(x, y); qadd(y, x);\n        &#125;\n        Tarjan(s);\n        for (int i = 1; i &lt;= m; ++i) &#123;\n            cout &lt;&lt; qedge[i &lt;&lt; 1].lca &lt;&lt; '\\n';\n        &#125;\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n<h2 id=\"operatorname-Tarjan-求割点、割边\">$\\operatorname{Tarjan}$ 求割点、割边</h2>\n<h3 id=\"前置芝士-2\">前置芝士</h3>\n<p><strong>割点</strong>：在一个无向连通图 $G(V,E)$ 中，删去结点 $u$ 和与它相连的边后，若该图变为非连通图，则称结点 $u$ 为该图的<strong>割点（关节点）</strong>。</p>\n<p><strong>割边</strong>：在一个无向连通图 $G(V,E)$ 中，删去边 $e$ 后，若该图变为非连通图，则称边 $e$ 为该图的<strong>割边（桥）</strong>。</p>\n<p>如下图中的 $2$ 点和 $6$ 点为割点，边 $(1,2)$ 和边 $(6,7)$ 为割边：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJeMZj.png\" alt=\"\"></p>\n<p><strong>重连通图</strong>：一个不含割点的连通图称为<strong>重连通图（双连通图）</strong>。重连通无向图重每对顶点之间至少存在两条路径，下图就是一个重连通图：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJelon.png\" alt=\"\"></p>\n<p><strong>一些性质</strong>：</p>\n<ul>\n<li>两个割点之间的边不一定是割边</li>\n<li>割边的两个端点不一定都是割点，但一定有一个是割点</li>\n</ul>\n<h3 id=\"operatorname-Tarjan-求割点\">$\\operatorname{Tarjan}$ 求割点</h3>\n<p>比方说我们对刚刚这个图求割点：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJeMZj.png\" alt=\"\"></p>\n<p>我们从结点 $2$ 开始深度优先遍历，可以得到如下深度优先生成树，实线边构成树边，虚线边构成回边：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/22/pPJeQds.png\" alt=\"\"></p>\n<p>设原图为 $G(V,E)$，其深度优先生成树为 $T(V,E)$ ，则 $G$ 和 $T$ 具有如下的性质：</p>\n<ul>\n<li>$\\forall u \\in V(T)$ ，要么是根，要么不是根</li>\n<li>$u$ 为根时，$u$ 是割点 $\\Leftrightarrow $ $u$ 有 $2$ 棵或 $2$ 棵以上的子树</li>\n<li>$u$ 不为根时，$u$ 是割点 $\\Leftrightarrow $ $u$ 存在儿子 $v$ 使得 $low_v \\ge dfn_u$</li>\n</ul>\n<p>我们发现性质里有一些陌生的东西，$dfn$ 和 $low$，这两个东西分别叫做<strong>深度优先数</strong>和<strong>最低深度优先数</strong>。我们在刚刚 $\\operatorname{DFS}$ 遍历的时候按照 $\\operatorname{DFS}$ 序给每个结点打上时间戳，这些时间戳就是深度优先数，我们用 $dfn$ 数组来存储它。如上图生成树中，$dfn_2=1$，$dfn_1=2$，$dfn_3=3$，$dfn_4=5$，$dfn_5=6$，$dfn_6=4$，$dfn_7=7$。而最低深度优先数 $low$ 则表示从结点 $u$ 出发能到达的点的最小深度优先数，其决定式如下：</p>\n$$\\displaylines{low_u=min\\left\\{\\begin{matrix}\n dfn_u\\\\\n low_v(u,v\\in V(T),v是u的孩子)\\\\\n dfn_v(u,v\\in V(T),(u,v)是一条回边)\n\\end{matrix}\\right.\n}$$<p>那么知道了这些我们再回过头去看刚刚第三个性质，当 $v$ 是 $u$ 的儿子且 $low_v&lt;dfn_u$ 时，以 $v$ 为根节点的子树中必然有节点与 $u$ 的祖先有回边，如果 $u$ 的任意儿子都满足这个特点时，$u$ 显然不是割点。</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P3388\">模板 P3388 【模板】割点（割顶）</a></p>\n<p>参考代码：</p>\n<pre><code class=\"language-cpp\">namespace SHAWN &#123;\n    const int N = 2e5 + 7;// 双向边开二倍空间\n    int head[N], cnt;\n    struct edge&#123; int to, next; &#125;edge[N];\n    int dfn[N], low[N];\n    bool used[N], flag[N];\n    int n, m, res, tim; \n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u, int fa) &#123;\n        used[u] = true;\n        low[u] = dfn[u] = ++tim;\n        int child = 0;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!used[v]) &#123;\n                if (fa == u) &#123; ++child; &#125;\n                Tarjan(v, u);\n                // 如果v是u的孩子\n                low[u] = min(low[u], low[v]);\n                // 如果u不是根且low[u] &gt;= dfn[u]就是割点 \n                if (fa != u &amp;&amp; low[v] &gt;= dfn[u] &amp;&amp; !flag[u]) &#123;\n                    flag[u] = true;\n                    ++res;\n                &#125; \n            &#125;\n            // 如果(u,v)是一条回边\n            else if (fa != v) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125;\n        // 如果u是根且有两个或两个以上子树就是割点\n        if (fa == u &amp;&amp; child &gt;= 2 &amp;&amp; !flag[u]) &#123;\n            flag[u] = true;\n            ++res;\n        &#125;\n    &#125;\n\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m;\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y); add(y, x);\n        &#125;\n        // 不保证连通所以要多次跑\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (!used[i]) &#123;\n                tim = 0;\n                Tarjan(i, i);\n            &#125;\n        &#125;\n        cout &lt;&lt; res &lt;&lt; '\\n';\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (flag[i]) &#123; cout &lt;&lt; i &lt;&lt; ' '; &#125;\n        &#125;\n        return 0;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"operatorname-Tarjan-求割边\">$\\operatorname{Tarjan}$ 求割边</h3>\n<p>设原图为 $G(V,E)$，其深度优先生成树为 $T(V,E)$ ，则 $G$ 和 $T$ 满足如下定理：</p>\n<p>$\\exists u,v \\in T$，$u$ 是 $v$ 的双亲，$u,v$ 之间的边不是有重边，则 $(u,v)$ 是割边 $\\Leftrightarrow $ $u$ 到 $v$ 的边不是重边且 $v$ 或 $v$ 的子孙结点中没有指向 $u$ 或着 $u$ 的祖先的回边。即 $(u,v)$ 是割边 $\\Leftrightarrow$ $dfn_u&lt;low_v$。</p>\n<p>然后我们把刚刚代码稍微改一改就出来了，像这样：</p>\n<pre><code class=\"language-cpp\">void Tarjan(int u, int fa) &#123;\n    par[u] = fa;\n    low[u] = dfn[u] = ++tim;\n    for (int i = head[u]; i; i = edge[i].next) &#123;\n        int v = edge[i].to;\n        if (!dfn(v)) &#123;\n            Tarjan(v, u);\n            low[u] = min(low[u], low[v]);\n            if (low[v] &gt; dfn[u]) &#123;\n                flag[v] = true;\n                ++res;\n            &#125;\n        &#125;\n        else if (dfn[v] &lt; dfn[u] &amp;&amp; v != fa) &#125;&#123;\n            low[u] = min(low[u], dfn[v]);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>最后当 $flag_u$ 为真时，边 $(u,par_u)$ 就是割边。</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P1656\">模板 P1656 炸铁路</a></p>\n<p>参考代码：</p>\n<pre><code class=\"language-cpp\">namespace SHAWN &#123;\n    const int N = 1e4 + 7;\n    int head[N], cnt;\n    struct edge &#123; int to, next; &#125;edge[N];\n    struct node &#123; int a, b; &#125;;\n    int dfn[N], low[N];\n    int n, m, tim;\n    struct cmp&#123; \n        bool operator() (const node &amp;x, const node &amp;y) const &#123;\n            if (x.a != y.a) &#123; return x.a &gt; y.a; &#125;\n            else &#123; return x.b &gt; y.b; &#125;\n        &#125;\n    &#125;;\n    priority_queue&lt;node, vector&lt;node&gt;, cmp&gt; q;\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u, int fa) &#123;\n        low[u] = dfn[u] = ++tim;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!dfn[v]) &#123;\n                Tarjan(v, u);\n                low[u] = min(low[u], low[v]);\n                if (low[v] &gt; dfn[u]) &#123;\n                    q.push(&#123;u,v&#125;);\n                &#125;\n            &#125;\n            else if (dfn[v] &lt; dfn[u] &amp;&amp; v != fa) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125;\n    &#125;\n\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m;\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y); add(y, x);\n        &#125;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (!dfn[i]) &#123;\n                Tarjan(i, i);\n            &#125;\n        &#125;\n        while (!q.empty()) &#123;\n            auto it = q.top(); q.pop();\n            cout &lt;&lt; it.a &lt;&lt; ' ' &lt;&lt; it.b &lt;&lt; '\\n';\n        &#125;\n        return 0;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"例题-2\">例题</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P5058\">1、割点 [ZJOI2004] 嗅探器</a></p>\n<p><strong>题目分析</strong></p>\n<p>题目要求我们删掉一个点使得给定的两个点不连通，那么其实我们就是要找一个满足要求的割点，如下图标黑的点就是题目给定的两个点：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/23/pPJqc80.png\" alt=\"\"></p>\n<p>点 $1$ 是一个割点，我们删除点 $1$ 即可使得 $2,4$ 两点不连通，但是并非任意割点都满足要求，比方说下面这张图：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/23/pPJqg2V.png\" alt=\"\"></p>\n<p>点 $3$ 和点 $4$ 都是图中的割点，但是删去 $4$ 并不能使得目标点 $1,7$ 不连通，所以只有点 $3$ 是符合条件的点，那么我们就要去筛选割点中符合要求的点。</p>\n<p>怎么筛呢？其实我们想一想建立 $\\operatorname{DFS}$ 树的过程，我们从题中给定的一个点开始搜，那么对于一个符合条件的割点来讲，题中给定的另一个点一定在这个符合条件的割点的子树中。所以在搜的时候加个判断条件就好了。本题因为不能删去根，所以不用考虑根是割点的情况，那么代码也就非常简单：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    const int N = 1e6 + 7;\n    int head[N], cnt;\n    struct edge &#123; int to, next; &#125;edge[N];\n    int n, tim, x, y;\n    int dfn[N], low[N];\n    bool vis[N], flag[N];\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u, int fa) &#123;\n        low[u] = dfn[u] = ++tim;\n        vis[u] = true;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!vis[v]) &#123;\n                Tarjan(v, u);\n                low[u] = min(low[u], low[v]);\n                // 这里多加一个u!=x和dfn[y]&gt;=dfn[v]的特判就OK了\n                if (fa != u &amp;&amp; low[v] &gt;= dfn[u] &amp;&amp; u != x &amp;&amp; dfn[y] &gt;= dfn[v]) &#123;\n                    flag[u] = true;\n                &#125;\n            &#125;\n            else if (fa != v) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125;\n    &#125;\n\n    int work()\n    &#123;\n        cin &gt;&gt; n;\n        while (cin &gt;&gt; x &gt;&gt; y &amp;&amp; x &amp;&amp; y) &#123;\n            add(x, y); add(y, x);\n        &#125;\n        cin &gt;&gt; x &gt;&gt; y;\n        Tarjan(x, x);\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (flag[i]) &#123;\n                cout &lt;&lt; i &lt;&lt; '\\n';\n                return 0;\n            &#125;\n        &#125;\n        cout &lt;&lt; &quot;No solution\\n&quot;;\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n<p><a href=\"https://www.luogu.com.cn/problem/P7687\">2、割边 [CEOI2005] Critical Network Lines</a></p>\n<p><strong>题目分析</strong></p>\n<p>与上一道题一样，我们显然可以看出来题目想让我们求出满足下面条件的割边——删掉这条边后剩下的两个连通块中至少一个块只包含 $A$ 类点或 $B$ 类点。比如下图（图中边上的数字是编号不是边权）：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/24/pPYBlad.png\" alt=\"\"></p>\n<p>这幅图中的割边有 $1,4,5,6,8$ 五条，而符合题目条件的只有 $1,6,8$ 这三条。我们发现，当一个割边满足条件当且仅当它连接的一个节点在深度优先生成树中的子树内只包含一类点。所以我们在 $\\operatorname{Tarjan}$ 求割边的时候，每找到一条割边 $(u,v)$，我们就检查一下以 $v$ 为根结点的子树内 $A$ 和 $B$ 类结点各自的数量，当其中一个个数为 $0$ 或者全满，就是要求的边，打上标记并给计数的答案加一就可以了。求数量的过程，可以在 $\\operatorname{DFS}$ 的时候递归计算。下面是 AC 代码：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    const int N = 2e6 + 7;\n    // 请注意这里一定要开二倍空间，要不然会寄\n    int head[N], cnt;\n    struct edge &#123; int to, next; &#125;edge[N];\n    int n, m, a, b, tim, res;\n    int dfn[N], low[N], acnt[N], bcnt[N], par[N];\n    // acnt[i]表示i结点子树中A类点数量，bcnt同理\n    // par用来记每个结点在dfs生成树中的父亲\n    bool flag[N];\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u, int fa) &#123;\n        low[u] = dfn[u] = ++tim;\n        par[u] = fa;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!dfn[v]) &#123;\n                Tarjan(v, u);\n                low[u] = min(low[u], low[v]);\n                if (low[v] &gt; dfn[u]) &#123;\n                    if (!acnt[v] || !bcnt[v] || acnt[v] == a || bcnt[v] == b) &#123;\n                        // A类或B类有一个为0或全满就说明符合要求\n                        flag[v] = true;\n                        ++res;\n                    &#125;\n                &#125;\n                acnt[u] += acnt[v]; bcnt[u] += bcnt[v];\n                // 从下向上递归统计子树情况\n            &#125;\n            else if (dfn[v] &lt; dfn[u] &amp;&amp; fa != v) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125;\n    &#125;\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;\n        for (int i = 1, x; i &lt;= a; ++i) &#123; cin &gt;&gt; x; acnt[x] = 1; &#125;\n        for (int i = 1, x; i &lt;= b; ++i) &#123; cin &gt;&gt; x; bcnt[x] = 1; &#125;\n        // 最开始每个点的子树就是自己\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y); add(y, x);\n        &#125;\n        Tarjan(1, 0);\n        cout &lt;&lt; res &lt;&lt; '\\n';\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (flag[i]) &#123;\n                cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; par[i] &lt;&lt; '\\n';\n            &#125;\n        &#125;\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n<h2 id=\"operatorname-Tarjan-求强连通分量\">$\\operatorname{Tarjan}$ 求强连通分量</h2>\n<h3 id=\"前置芝士-3\">前置芝士</h3>\n<p><strong>强连通</strong>：在有向图 $G$ 中，如果两个顶点 $u_i,u_j$ 间 $(u_i \\ne u_j)$ 有一条从 $u_i$ 到 $u_j$ 的有向路径，同时还有一条从 $u_j$ 到 $u_i$ 的有向路径，则称两个顶点<strong>强连通(Strongly Connected, SC)</strong>。</p>\n<p><strong>强连通图</strong>：有向图 $G$ 中，若任意两点强连通，则称 $G$ 是一个强连通图。</p>\n<p><strong>强连通分量(Strongly Connected Components, SCC)</strong>：极大的强连通子图。</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/24/pPY6O54.png\" alt=\"\"></p>\n<p>如图是一个强连通图，图上的强连通分量有三个：$a-b-c-d,e,f$。</p>\n<p><strong>缩点</strong>：因为强连通图中任意两点连通，所以在不考虑路径长度只考虑连通性的情况下，可以将一个强连通分量压缩成一个点来进行处理，这样就可以缩小图的规模。</p>\n<h3 id=\"实现过程-2\">实现过程</h3>\n<p>我们算法的主要过程与步骤如下：</p>\n<ol>\n<li>从根开始向下搜索，实时更新 $dfn$ 和 $low$，每搜到一个点就入栈；</li>\n<li>当 $v$ 未被访问过，我们继续深搜，在回溯过程中，用 $low_v$ 更新 $low_u$，当回溯到某一个点 $u$ 使得 $dfn_u=low_u$ 时，弹栈直到把自己也弹出来，这些弹出来的元素就是一个强连通分量；</li>\n<li>当 $v$ 被访问过且已经在栈中，就像前面一样用 $dfn_v$ 更新 $low_u$；</li>\n<li>当 $v$ 被访问过且不在栈中，不操作。</li>\n</ol>\n<p>下面给出一个例子来帮助读者理解这一过程：</p>\n<p><img src=\"https://s1.ax1x.com/2023/08/24/pPYRldK.png\" alt=\"\"></p>\n<ol>\n<li>如图 (a)，从 $1$ 开始搜，$1$ 入栈，$dfn_1=low_1=1$；</li>\n<li>如图 (b)，搜到 $2$，$2$ 入栈，搜到 $3$，$3$ 入栈，搜到 $4$，$4$ 入栈，接下来通过返祖边搜到了 $2$，$low_4=2$；</li>\n<li>如图 ©，返回 $3$，$low_3=2$，返回 $2$，$low_2=2$，此时 $low_2=dfn_2=2$，所以找到了一个强连通分量，弹栈直到自己得到连通分量 $\\{2,3,4\\}$；</li>\n<li>如图 (d)，返回 $1$，搜到 $5$ 入栈，搜到 $6$ 入栈，连向 $3$ 有一条横向边，但 $3$ 不在栈里，所以不管，搜到 $7$ 入栈，然后搜不下去了，$low_7=dfn_7=7$，弹栈直到自己得到连通分量 $\\{7\\}$；</li>\n<li>如图 (e)，返回 $6$，$low_6=dfn_6=6$，弹栈知直到自己得到连通分量 $\\{6\\}$，回到 $5$，访问过了但是 $dfn$ 和 $low$ 更新后没变，搜到 $8$，接下来通过返祖边搜到了 $1$，$low_8=1$；</li>\n<li>如图 (f)，返回 $5$，$low_5=1$，返回 $1$，前向边搜到 $8$，更新后没变所以不管，返回 $1$，$low_1=dfn_1=1$，弹栈直到自己得到连通分量 $\\{1,5,8\\}$。</li>\n</ol>\n<p>代码大概就长这样：</p>\n<pre><code class=\"language-cpp\">namespace SHAWN &#123;\n    const int N = 1e5 + 10;\n    int head[N], cnt;\n    struct edge &#123; int to, next; &#125;edge[N];\n    int n, m, tim, top, idx;\n    int dfn[N], low[N], st[N], size[N], scc[N];\n    bool chkin[N];\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u) &#123;\n        low[u] = dfn[u] = ++tim;\n        st[++top] = u;// 搜到就入栈\n        chkin[u] = true;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!dfn[v]) &#123;\n                Tarjan(v);\n                low[u] = min(low[u], low[v]);\n            &#125;\n            else if (chkin[v]) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125; \n        if (low[u] == dfn[u]) &#123;\n            //low[u]=dfn[u]时弹栈直到自己\n            int v; ++idx;\n            do &#123;\n                v = st[top--];\n                scc[v] = idx;\n                chkin[v] = false;\n                ++size[idx];\n            &#125; while (v != u);\n        &#125;\n    &#125;\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m;\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y);\n        &#125;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (!dfn[i]) &#123;\n                Tarjan(i);\n            &#125;\n        &#125;\n        int ans = 0;\n        for (int i = 1; i &lt;= idx; ++i) &#123;\n            ans += (size[i] &gt; 1);\n        &#125;\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            cout &lt;&lt; scc[i] &lt;&lt; ' ';\n        &#125;\n        return 0;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"例题-3\">例题</h3>\n<p><a href=\"https://www.luogu.com.cn/problem/P2341\">1、P2341 USACO03FALL / HAOI2006 受欢迎的牛 G</a></p>\n<p>我们考虑如何建模。一只奶牛喜欢另一只奶牛可以表示为有向图上的一条有向边，因为爱慕关系具有传递性，所以能和其余所有点都连通的结点就是一个可行答案。我们如何去优化这个问题呢？考虑在强连通分量中，因为所有点都互相连通，所以我们可以进行缩点。缩点后如果只有一个出度为 $0$ 的点，那么答案就是这个强连通分量中包含的结点个数。如果有多个出度为 $0$ 的点或根本没有出度为 $0$ 的点，就没有明星牛。这怎么理解呢？缩点以后点内奶牛不再互相爱慕，对于整个图，只有不爱慕别的牛的牛才能成为明星奶牛~~（看看，多不好）~~，但如果大家都不爱慕别的牛了显然也不符合要求，所以我们有了这样的判断。那么代码就是上面的题小改了一下：</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\nusing namespace std;\n\nnamespace SHAWN &#123;\n    const int N = 5e4 + 7;\n    int head[N], cnt;\n    struct edge &#123; int to, next; &#125;edge[N];\n    int n, m, tim, top, idx, cont, ans;\n    int dfn[N], low[N], size[N], sta[N], scc[N], diag[N];\n    bool chkin[N];\n\n    inline void add(int u, int v) &#123;\n        edge[++cnt].next = head[u];\n        edge[cnt].to = v;\n        head[u] = cnt;\n    &#125;\n\n    void Tarjan(int u) &#123;\n        low[u] = dfn[u] = ++tim;\n        sta[++top] = u;\n        chkin[u] = true;\n        for (int i = head[u]; i; i = edge[i].next) &#123;\n            int v = edge[i].to;\n            if (!dfn[v]) &#123;\n                Tarjan(v);\n                low[u] = min(low[u], low[v]);\n            &#125;\n            else if (chkin[v]) &#123;\n                low[u] = min(low[u], dfn[v]);\n            &#125;\n        &#125;\n        if (low[u] == dfn[u]) &#123;\n            int v; ++idx;\n            do &#123;\n                v = sta[top--];\n                scc[v] = idx;\n                chkin[v] = false;\n                ++size[idx];\n            &#125; while (v != u);\n        &#125;\n    &#125;\n\n    int work()\n    &#123;\n        cin &gt;&gt; n &gt;&gt; m;\n        for (int i = 1, x, y; i &lt;= m; ++i) &#123;\n            cin &gt;&gt; x &gt;&gt; y;\n            add(x, y);\n        &#125;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            if (!dfn[i]) &#123;\n                Tarjan(i);\n            &#125;\n        &#125;\n        for (int i = 1; i &lt;= n; ++i) &#123;\n            for (int j = head[i]; j; j = edge[j].next) &#123;\n                int v = edge[j].to;\n                if (scc[i] != scc[v]) &#123;\n                    ++diag[scc[i]];\n                &#125;\n            &#125;\n        &#125;\n        for (int i = 1; i &lt;= idx; ++i) &#123;\n            if (!diag[i]) &#123;\n                ++cont;\n                ans += size[i];  \n            &#125;\n        &#125;\n        if (cont == 1) &#123; cout &lt;&lt; ans &lt;&lt; '\\n'; &#125;\n        else &#123; cout &lt;&lt; &quot;0\\n&quot;; &#125;\n        return 0;\n    &#125;\n&#125;\n\nsigned int main() &#123;\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    return SHAWN :: work();\n&#125;\n</code></pre>\n<h2 id=\"总结\">总结</h2>\n<p>我们总共总结了 $\\operatorname{Tarjan}$ 算法的三种主要用法，其实与其说它是一种算法，不如说它是一种 $\\operatorname{DFS}$ 时的思想，也就是通过对于图上点先后访问关系来形成一棵 $\\operatorname{DFS}$ 生成树，用回溯的方法在树上对点对之间的关系进行操作和处理，最终得到我们想要的最近公共祖先，割点，割边或者强连通分量。而我们在运用这些方法的时候也要做到灵活变通，仔细考虑题目中给定的点边关系，然后再将统计答案的步骤加入到搜索的过程中来通过递归和筛选得到我们想要的答案。</p>\n<p><strong>以上内容如有错误或不严谨的地方，请各位巨佬指正，orz</strong></p>\n<h2 id=\"参考文献\">参考文献</h2>\n<ul>\n<li>汪星明 Tarjan相关算法及其应用</li>\n<li><a href=\"https://oi-wiki.org/graph/lca/\">OI-Wiki 最近公共祖先</a></li>\n<li><a href=\"https://www.cnblogs.com/jsawz/p/6723221.html\">江屿 tarjan算法求LCA</a></li>\n<li><a href=\"https://oi-wiki.org/graph/cut/\">OI-Wiki 割点和桥</a></li>\n<li><a href=\"https://oi-wiki.org/graph/scc/\">OI-Wiki 强连通分量</a></li>\n<li>洛谷网校《深入浅出程序设计竞赛进阶篇》</li>\n</ul>\n",
            "tags": [
                "Tarjan"
            ]
        }
    ]
}